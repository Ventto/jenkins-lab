#!/usr/bin/groovy

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Thomas "Ventto" Venri√®s <thomas.venries@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
def pid = null

pipeline {
    /*
     * Caution: The expression bellow make Jenkins master run the pipeline on
     * its own machine or any available slaves. If you want to run the latter
     * on a specific unit, you might need to set the `agent`.
     */
    agent any

    stages {
        stage("First") {
            steps {
                script {
                    wrap([$class: 'Xvfb',
                          autoDisplayName: true,
                          shutdownWithBuild:true]) {
                        // Get the process's PID
                        pid = sh(returnStdout: true, script: """
                            nohup gedit >/dev/null 2>&1 &
                            echo "\$!"
                        """).trim()
                    }
                }
                // Print the process's PID
                echo "PID = '${pid}'"
            }
        }
        stage("Second") {
            steps {
                // Verify that the process is still running in this stage
                sh "ps -p ${pid}"
            }
        }
    }
}
